import axiosInstance from "./axiosInstance";

/**
 * Utility ƒë·ªÉ l·∫•y token t·ª´ localStorage
 */
function getTokenFromLocalStorage(key: string): string | null {
  try {
    return localStorage.getItem(key);
  } catch {
    return null;
  }
}

/**
 * Axios instance chuy√™n d·ª•ng cho Student API
 * Backend s·ª≠ d·ª•ng httpOnly cookie authentication, kh√¥ng c·∫ßn Authorization header
 */
const axiosStudent = axiosInstance.create({
  withCredentials: true, // Quan tr·ªçng: ƒë·ªÉ browser t·ª± ƒë·ªông g·ª≠i httpOnly cookies
});

// Request interceptor - kh√¥ng c·∫ßn th√™m Authorization header v√¨ backend d√πng cookie
axiosStudent.interceptors.request.use(
  (config) => {
    // Backend authenticate th√¥ng qua req.cookies.accessToken
    // Kh√¥ng c·∫ßn th√™m Authorization header
    console.log("üì§ [STUDENT REQUEST] Sending request with credentials");
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Response interceptor ƒë·ªÉ handle token expiry v√† auto refresh
axiosStudent.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;

    // N·∫øu b·ªã 401 v√† ch∆∞a retry
    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;

      try {
        // Th·ª≠ refresh token - backend s·∫Ω ƒë·ªçc t·ª´ httpOnly cookie
        const refreshResponse = await axiosInstance.get("/auth/refresh-token", {
          withCredentials: true // Quan tr·ªçng: ƒë·ªÉ g·ª≠i httpOnly refresh cookie
        });

        if (refreshResponse.data.success) {
          // Backend s·∫Ω set cookie m·ªõi v√† response kh√¥ng c√≥ accessToken trong data
          // Ch·ªâ c·∫ßn th·ª≠ l·∫°i request g·ªëc v√¨ cookie ƒë√£ ƒë∆∞·ª£c update
          console.log("‚úÖ [REFRESH] Token refreshed successfully via cookie");
          return axiosStudent(originalRequest);
        }
      } catch (refreshError) {
        console.error("Student auto refresh token failed:", refreshError);
        // X√≥a token c≈© trong localStorage
        localStorage.removeItem("accessToken");
        localStorage.removeItem("refreshToken");
        localStorage.removeItem("contestantInfo");
      }

      // Redirect to student login if refresh fails
      if (!window.location.pathname.includes("/student/login")) {
        window.location.href = "/student/login";
      }
    }

    return Promise.reject(error);
  }
);

/**
 * Debug utility ƒë·ªÉ ki·ªÉm tra token info
 */
export const debugStudentToken = () => {
  const localToken = getTokenFromLocalStorage("accessToken");
  const contestantInfo = getTokenFromLocalStorage("contestantInfo");

  console.log("üîç [STUDENT TOKEN DEBUG] Token info:", {
    localToken: localToken ? `${localToken.substring(0, 20)}... (FOR DISPLAY ONLY)` : null,
    hasContestantInfo: !!contestantInfo,
    withCredentials: true, // Authentication ch·ªâ qua httpOnly cookie
    note: "Backend ch·ªâ s·ª≠ d·ª•ng req.cookies.accessToken, kh√¥ng ƒë·ªçc Authorization header",
    timestamp: new Date().toISOString()
  });

  return {
    localToken,
    hasContestantInfo: !!contestantInfo,
    withCredentials: true
  };
};

export default axiosStudent; 