import type { 
  Question, 
  QuestionsListResponse,
  SearchParams,
  BatchDeleteResponseData
} from '../types';
import axiosInstance from '../../../../config/axiosInstance';

const BASE_URL = '/questions';

interface ApiResponse<T> {
  success: boolean;
  message: string;
  data: T;
  timestamp: string;
}

// ƒê·ªãnh nghƒ©a cho response t·ªïng th·ªÉ t·ª´ API khi batch delete
interface BatchDeleteApiResponse {
  success: boolean;
  message: string;
  data: BatchDeleteResponseData;
  timestamp: string;
}

export const questionService = {
  /**
   * L·∫•y danh s√°ch c√¢u h·ªèi t·ª´ API
   * GET /api/questions
   */
  getQuestions: async (params: SearchParams): Promise<QuestionsListResponse> => {
    try {
      // T·∫°o m·ªôt b·∫£n sao c·ªßa params ƒë·ªÉ tr√°nh thay ƒë·ªïi params g·ªëc
      const queryParams = { ...params };

      // Ch·ªâ g·ª≠i questionType n·∫øu c√≥ gi√° tr·ªã h·ª£p l·ªá
      if (!queryParams.questionType || !['multiple_choice', 'essay'].includes(queryParams.questionType)) {
        delete queryParams.questionType;
      }

      // Ch·ªâ g·ª≠i difficulty n·∫øu c√≥ gi√° tr·ªã h·ª£p l·ªá
      if (!queryParams.difficulty || !['Alpha', 'Beta', 'Rc', 'Gold'].includes(queryParams.difficulty)) {
        delete queryParams.difficulty;
      }

      // Ch·ªâ g·ª≠i isActive n·∫øu c√≥ gi√° tr·ªã boolean
      if (queryParams.isActive === undefined) {
        delete queryParams.isActive;
      }

      const response = await axiosInstance.get<QuestionsListResponse>(BASE_URL, { params: queryParams });
      return response.data;
    } catch (error) {
      console.error('L·ªói khi l·∫•y danh s√°ch c√¢u h·ªèi:', error);
      throw error;
    }
  },

  /**
   * L·∫•y chi ti·∫øt m·ªôt c√¢u h·ªèi
   * GET /api/questions/{id}
   */
  getQuestionById: async (id: number): Promise<Question> => {
    try {
      const response = await axiosInstance.get<ApiResponse<Question>>(`${BASE_URL}/${id}`);
      return response.data.data;
    } catch (error) {
      console.error('L·ªói khi l·∫•y chi ti·∫øt c√¢u h·ªèi:', error);
      throw error;
    }
  },

  /**
   * T·∫°o c√¢u h·ªèi m·ªõi
   * POST /api/questions
   */
  createQuestion: async (formData: FormData): Promise<{ question: Question; message: string }> => {
    try {
      // Log to√†n b·ªô entries c·ªßa formData ƒë·ªÉ debug
      for (const [key, value] of formData.entries()) {
        console.log('FormData field:', key, value);
      }
      const response = await axiosInstance.post<ApiResponse<Question>>(BASE_URL, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });
      return {
        question: response.data.data,
        message: response.data.message
      };
    } catch (error) {
      console.error('L·ªói khi t·∫°o c√¢u h·ªèi m·ªõi:', error);
      throw error;
    }
  },

  /**
   * C·∫≠p nh·∫≠t c√¢u h·ªèi
   * PATCH /api/questions/{id}
   */
  updateQuestion: async (id: number, formData: FormData): Promise<ApiResponse<Question>> => {
    try {
      // Log FormData ƒë·ªÉ ki·ªÉm tra
      console.log('üì§ FormData tr∆∞·ªõc khi g·ª≠i API:');
      for (const pair of formData.entries()) {
        console.log(`${pair[0]}:`, pair[1]);
      }

      const response = await axiosInstance.patch<ApiResponse<Question>>(
        `/questions/${id}`,
        formData,
        {
          headers: {
            'Content-Type': 'multipart/form-data'
          },
          onUploadProgress: (progressEvent) => {
            const percentCompleted = Math.round((progressEvent.loaded * 100) / (progressEvent.total || 1));
            console.log(`üìä Upload progress: ${percentCompleted}%`);
          }
        }
      );
      
      console.log('üì• API Response received:', response.data);
      console.log('üé¨ Response question media:', response.data.data?.questionMedia);
      console.log('üéµ Response media answer:', response.data.data?.mediaAnswer);
      console.log('üìä Media lengths:', {
        questionMediaLength: response.data.data?.questionMedia?.length || 0,
        mediaAnswerLength: response.data.data?.mediaAnswer?.length || 0
      });
      
      return response.data;
    } catch (error) {
      console.error('‚ùå Chi ti·∫øt l·ªói updateQuestion:', error);
      throw error;
    }
  },

  /**
   * X√≥a c√¢u h·ªèi (soft delete)
   * DELETE /api/questions/{id}
   */
  deleteQuestion: async (id: number): Promise<{ message: string }> => {
    try {
      const response = await axiosInstance.delete<ApiResponse<null>>(`${BASE_URL}/${id}/hard`);
      console.log('respone delete',response)
      console.log('message delete',response.data.message)
      return {
        message: response.data.message
      };
    } catch (error) {
      console.error('L·ªói khi x√≥a c√¢u h·ªèi:', error);
      throw error;
    }
  },

  /**
   * X√≥a c√¢u h·ªèi (hard delete)
   * DELETE /api/questions/{id}/hard
   */
  hardDeleteQuestion: async (id: number): Promise<{ message: string }> => {

    try {
      const response = await axiosInstance.delete<ApiResponse<null>>(`${BASE_URL}/${id}/hard`);
      return {
        message: response.data.message
      };
    } catch (error) {
      console.error('L·ªói khi x√≥a vƒ©nh vi·ªÖn c√¢u h·ªèi:', error);
      throw error;
    }
  },

  /**
   * X√≥a nhi·ªÅu c√¢u h·ªèi c√πng l√∫c
   * POST /api/questions/batch
   */
  batchDelete: async (ids: number[]): Promise<BatchDeleteResponseData> => {
    console.log('ids delete',ids)
    try {
        console.log('ids delete2',ids)
      const response = await axiosInstance.delete<BatchDeleteApiResponse>(`${BASE_URL}/batch`,
        {data: { ids, hardDelete: true} }
      );
      console.log('respone batch delete',response)
      console.log('message batch delete',response.data.message)
      return response.data.data;
    } catch (error) {
      console.error('L·ªói khi x√≥a nhi·ªÅu c√¢u h·ªèi:', error);
      throw error;
    }
  },

  /**
   * Upload media cho c√¢u h·ªèi
   * POST /api/questions/{id}/media
   */
  uploadMedia: async (id: number, mediaType: 'questionMedia' | 'mediaAnswer', files: File[]): Promise<{ question: Question; message: string }> => {
    try {
      const formData = new FormData();
      formData.append('mediaType', mediaType);
      
      // Th√™m c√°c file v√†o formData
      files.forEach(file => {
        formData.append('media', file);
      });
      
      const response = await axiosInstance.post<ApiResponse<Question>>(
        `${BASE_URL}/${id}/media`, 
        formData, 
        {
          headers: {
            'Content-Type': 'multipart/form-data',
          },
        }
      );
      
      return {
        question: response.data.data,
        message: response.data.message
      };
    } catch (error) {
      console.error('L·ªói khi upload media cho c√¢u h·ªèi:', error);
      throw error;
    }
  }
}; 