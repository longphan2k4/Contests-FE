import { useEffect, useState } from 'react';
import { io, Socket } from 'socket.io-client';

interface SocketResponse {
  success: boolean;
  message: string;
  roomSize?: number;
  matchId?: number;
  roomName?: string;
}

interface StudentSocketReturn {
  socket: Socket | null;
  isConnected: boolean;
  joinMatchRoom: (matchId: number) => void;
  leaveMatchRoom: (matchSlug: string) => void;
  joinMatchForAnswering: (matchSlug: string, callback?: (response: SocketResponse) => void) => void;
}

const SOCKET_URL = import.meta.env.VITE_SOCKET_URL || 'http://localhost:3000';

export const useStudentSocket = (): StudentSocketReturn => {
  const [socket, setSocket] = useState<Socket | null>(null);
  const [isConnected, setIsConnected] = useState(false);

  useEffect(() => {
    // Ch·ªâ k·∫øt n·ªëi ƒë·∫øn namespace /student - kh√¥ng c·∫ßn match-control cho student
    const studentSocket = io(`${SOCKET_URL}/student`, {
      withCredentials: true,
      transports: ['websocket', 'polling'],
      reconnection: true,
      reconnectionAttempts: 5,
      reconnectionDelay: 1000,
    });

    // Student namespace events
    studentSocket.on('connect', () => {
      console.log('‚úÖ [FE] ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng t·ªõi namespace /student:', studentSocket.id);
      console.log('üîç [FE] Student socket s·∫µn s√†ng nh·∫≠n events');
      setIsConnected(true);
    });

    studentSocket.on('disconnect', (reason) => {
      console.log('‚ùå [FE] M·∫•t k·∫øt n·ªëi t·ªõi namespace /student. L√Ω do:', reason);
      setIsConnected(false);
    });

    studentSocket.on('connect_error', (error) => {
      console.error('üö´ [FE] L·ªói k·∫øt n·ªëi t·ªõi namespace /student:', error);
      console.error('üö´ [FE] Error message:', error.message);
      console.error('üö´ [FE] Error details:', error);
      setIsConnected(false);
    });

    studentSocket.on('reconnect', (attemptNumber) => {
      console.log('üîÑ [FE] K·∫øt n·ªëi l·∫°i th√†nh c√¥ng sau', attemptNumber, 'l·∫ßn th·ª≠');
      setIsConnected(true);
    });

    studentSocket.on('reconnect_error', (error) => {
      console.error('üîÑ [FE] L·ªói k·∫øt n·ªëi l·∫°i:', error);
    });

    // Authentication error handlers
    studentSocket.on('error', (error) => {
      console.error('üö´ [FE] L·ªói x√°c th·ª±c ho·∫∑c l·ªói kh√°c t·ª´ socket /student:', error);
      setIsConnected(false);
    });

    setSocket(studentSocket);

    // Cleanup on unmount
    return () => {
      console.log('üßπ [STUDENT SOCKET] D·ªçn d·∫πp k·∫øt n·ªëi socket student');
      studentSocket.disconnect();
      setSocket(null);
      setIsConnected(false);
    };
  }, []);

  const joinMatchRoom = (matchId: number) => {
    if (socket && isConnected) {
      console.log(`üè† [FE STUDENT SOCKET] ƒêang join ph√≤ng match-${matchId}...`);
      socket.emit('joinMatchRoom', matchId, (response: SocketResponse) => {
        if (response.success) {
          console.log('‚úÖ [FE STUDENT SOCKET] Tham gia ph√≤ng student th√†nh c√¥ng:', response);
          console.log('üìä [FE STUDENT SOCKET] Room size:', response.roomSize);
        } else {
          console.error('‚ùå [FE STUDENT SOCKET] Tham gia ph√≤ng student th·∫•t b·∫°i:', response.message);
        }
      });
    } else {
      console.warn('‚ö†Ô∏è [FE STUDENT SOCKET] Kh√¥ng th·ªÉ tham gia ph√≤ng - ch∆∞a k·∫øt n·ªëi socket');
      console.warn('‚ö†Ô∏è [FE STUDENT SOCKET] Socket status:', { socket: !!socket, isConnected });
    }
  };

  const leaveMatchRoom = (matchSlug: string) => {
    if (socket && isConnected) {
      console.log(`üö™ [FE] R·ªùi ph√≤ng student cho tr·∫≠n ƒë·∫•u: ${matchSlug}`);
      socket.emit('leaveMatchRoom', matchSlug);
    }
  };

  const joinMatchForAnswering = (matchSlug: string, callback?: (response: SocketResponse) => void) => {
    if (!socket || !isConnected) {
      console.warn('‚ö†Ô∏è [STUDENT SOCKET] Kh√¥ng th·ªÉ tham gia match - socket ch∆∞a k·∫øt n·ªëi');
      if (callback) {
        callback({ 
          success: false, 
          message: 'Student socket not connected' 
        });
      }
      return;
    }

    console.log(`üìù [STUDENT SOCKET] Tham gia match ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi: ${matchSlug}`);
    socket.emit('student:joinMatch', { matchSlug }, callback);
  };

  return {
    socket,
    isConnected,
    joinMatchRoom,
    leaveMatchRoom,
    joinMatchForAnswering,
  };
}; 