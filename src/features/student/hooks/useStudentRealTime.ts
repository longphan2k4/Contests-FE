import { useState, useEffect, useCallback } from 'react';
import { useStudentSocket } from './useStudentSocket';
import { useNavigate } from 'react-router-dom';

interface QuestionData {
  id: number;
  content: string;
  intro?: string;
  questionType: string;
  difficulty: string;
  score: number;
  defaultTime: number;
  options: string[];
  correctAnswer?: string;
  explanation?: string;
}

interface CurrentQuestionData {
  order: number;
  question: QuestionData;
}

interface StudentRealTimeState {
  currentQuestion: CurrentQuestionData | null;
  remainingTime: number;
  matchStatus: string;
  isMatchStarted: boolean;
  lastUpdated: string;
}

interface StudentRealTimeReturn {
  realTimeState: StudentRealTimeState;
  isConnected: boolean;
  joinMatchRoom: (matchId: number) => void;
  leaveMatchRoom: (matchId: number) => void;
}

// Socket event types
interface MatchStartedEvent {
  matchId: number;
  matchName: string;
  contestName: string;
  status: string;
}

interface QuestionChangedEvent {
  matchId: number;
  currentQuestion: number;
  remainingTime: number;
  currentQuestionData?: CurrentQuestionData;
}

interface TimerUpdatedEvent {
  matchId: number;
  remainingTime: number;
}

interface TimerPausedEvent {
  matchId: number;
  pausedBy: string;
}

interface TimerResumedEvent {
  matchId: number;
  resumedBy: string;
}

interface TimeUpEvent {
  matchId: number;
}

interface MatchEndedEvent {
  matchId: number;
  status: string;
}

interface AnswerSubmittedEvent {
  contestantId: number;
  studentName: string;
  studentCode: string;
  questionOrder: number;
  isCorrect: boolean;
  submittedAt: string;
  matchId: number;
  progress: {
    answeredQuestions: number;
    totalQuestions: number;
  };
}

interface ContestantEliminatedEvent {
  contestantId: number;
  studentName: string;
  studentCode: string;
  questionOrder: number;
  eliminationReason: string;
  eliminatedAt: string;
  matchId: number;
}

interface StudentEliminatedEvent {
  message: string;
  questionOrder: number;
  eliminatedAt: string;
  correctAnswer: string;
  explanation: string;
  redirectTo: string;
}

export const useStudentRealTime = (matchId?: number): StudentRealTimeReturn => {
  const { socket, isConnected, joinMatchRoom, leaveMatchRoom } = useStudentSocket();
  const navigate = useNavigate();
  
  const [realTimeState, setRealTimeState] = useState<StudentRealTimeState>({
    currentQuestion: null,
    remainingTime: 0,
    matchStatus: 'upcoming',
    isMatchStarted: false,
    lastUpdated: new Date().toISOString()
  });

  // Update real-time state
  const updateState = useCallback((updates: Partial<StudentRealTimeState>) => {
    setRealTimeState(prev => ({
      ...prev,
      ...updates,
      lastUpdated: new Date().toISOString()
    }));
  }, []);

  // Join room khi c√≥ matchId v√† socket connected
  useEffect(() => {
    if (!isConnected || !matchId) return;
    
    console.log('üè† [REALTIME H·ªåC SINH] Tham gia ph√≤ng tr·∫≠n ƒë·∫•u cho matchId:', matchId);
    joinMatchRoom(matchId);

    // Cleanup - leave room khi unmount
    return () => {
      console.log('üö™ [REALTIME H·ªåC SINH] R·ªùi kh·ªèi ph√≤ng tr·∫≠n ƒë·∫•u cho matchId:', matchId);
      leaveMatchRoom(matchId);
    };
  }, [isConnected, matchId, joinMatchRoom, leaveMatchRoom]);

  // L·∫Øng nghe c√°c socket events t·ª´ student namespace (t·∫•t c·∫£ events b√¢y gi·ªù ƒë·∫øn t·ª´ 1 socket duy nh·∫•t)
  useEffect(() => {
    if (!socket) return;

    console.log('üéß [REALTIME H·ªåC SINH] ƒêƒÉng k√Ω listeners cho student namespace...');

    // Event: Match started - chuy·ªÉn t·ª´ dashboard sang waiting room
    const handleMatchStarted = (data: MatchStartedEvent) => {
      console.log('üî• [H·ªåC SINH] Nh·∫≠n s·ª± ki·ªán match:started t·ª´ student namespace:', data);
      
      if (data.matchId === matchId) {
        console.log('üî• [H·ªåC SINH] Tr·∫≠n ƒë·∫•u ƒë√£ b·∫Øt ƒë·∫ßu - c·∫≠p nh·∫≠t state...');
        
        updateState({
          matchStatus: 'ongoing',
          isMatchStarted: true
        });
      }
    };

    // Event: Question changed - c·∫≠p nh·∫≠t c√¢u h·ªèi m·ªõi trong waiting room
    const handleQuestionChanged = (data: QuestionChangedEvent) => {
      console.log('üî• [H·ªåC SINH] Nh·∫≠n s·ª± ki·ªán match:questionChanged t·ª´ student namespace:', data);
      console.log('üîç [DEBUG] Current matchId from hook:', matchId);
      console.log('üîç [DEBUG] Received matchId from event:', data.matchId);
      
      if (data.currentQuestionData?.question) {
        console.log('üìù [H·ªåC SINH] Chi ti·∫øt c√¢u h·ªèi nh·∫≠n ƒë∆∞·ª£c:', {
          id: data.currentQuestionData.question.id,
          questionType: data.currentQuestionData.question.questionType,
          optionsCount: data.currentQuestionData.question.options?.length || 0,
          options: data.currentQuestionData.question.options
        });
      }
      
      if (data.matchId === matchId) {
        console.log('üî• [H·ªåC SINH] X·ª≠ l√Ω thay ƒë·ªïi c√¢u h·ªèi trong waiting room...');
        
        const newState = {
          currentQuestion: data.currentQuestionData || null,
          remainingTime: data.remainingTime,
          isMatchStarted: true,
          matchStatus: 'ongoing'
        };
        
        console.log('üîç [DEBUG] New state to update:', newState);
        updateState(newState);
      }
    };

    // Event: Timer updated - c·∫≠p nh·∫≠t th·ªùi gian c√≤n l·∫°i
    const handleTimerUpdated = (data: TimerUpdatedEvent) => {
      if (data.matchId === matchId) {
        updateState({
          remainingTime: data.remainingTime
        });
      }
    };

    // Event: Timer paused
    const handleTimerPaused = (data: TimerPausedEvent) => {
      console.log('‚è∏Ô∏è [H·ªåC SINH] Timer t·∫°m d·ª´ng:', data);
      if (data.matchId === matchId) {
        // C√≥ th·ªÉ th√™m logic x·ª≠ l√Ω pause n·∫øu c·∫ßn
      }
    };

    // Event: Timer resumed
    const handleTimerResumed = (data: TimerResumedEvent) => {
      console.log('‚ñ∂Ô∏è [H·ªåC SINH] Timer ti·∫øp t·ª•c:', data);
      if (data.matchId === matchId) {
        // C√≥ th·ªÉ th√™m logic x·ª≠ l√Ω resume n·∫øu c·∫ßn
      }
    };

    // Event: Time up
    const handleTimeUp = (data: TimeUpEvent) => {
      console.log('‚è∞ [H·ªåC SINH] H·∫øt th·ªùi gian:', data);
      if (data.matchId === matchId) {
        updateState({
          remainingTime: 0
        });
      }
    };

    // Event: Match ended
    const handleMatchEnded = (data: MatchEndedEvent) => {
      console.log('üèÅ [H·ªåC SINH] Tr·∫≠n ƒë·∫•u k·∫øt th√∫c:', data);
      if (data.matchId === matchId) {
        updateState({
          matchStatus: data.status,
          isMatchStarted: false,
          remainingTime: 0
        });

        // Auto redirect sau 3 gi√¢y
        setTimeout(() => {
          navigate('/student/dashboard');
        }, 3000);
      }
    };

    // Event: Answer submitted (th√¥ng b√°o v·ªÅ c√¢u tr·∫£ l·ªùi c·ªßa c√°c th√≠ sinh kh√°c)
    const handleAnswerSubmitted = (data: AnswerSubmittedEvent) => {
      console.log('üìù [H·ªåC SINH] Th√≠ sinh kh√°c ƒë√£ tr·∫£ l·ªùi:', {
        studentName: data.studentName,
        questionOrder: data.questionOrder,
        isCorrect: data.isCorrect
      });
      // Ch·ªâ log, kh√¥ng c·∫ßn update state
    };

    // Event: Contestant eliminated (th√¥ng b√°o th√≠ sinh kh√°c b·ªã lo·∫°i)
    const handleContestantEliminated = (data: ContestantEliminatedEvent) => {
      console.log('üö´ [H·ªåC SINH] Th√≠ sinh kh√°c b·ªã lo·∫°i:', {
        studentName: data.studentName,
        reason: data.eliminationReason
      });
      // Ch·ªâ log, kh√¥ng c·∫ßn update state
    };

    // Event: Student eliminated (cho ch√≠nh th√≠ sinh b·ªã lo·∫°i)
    const handleStudentEliminated = (data: StudentEliminatedEvent) => {
      console.log('üö´ [H·ªåC SINH] B·∫°n ƒë√£ b·ªã lo·∫°i:', data);

      alert(`${data.message}\n\nC√¢u tr·∫£ l·ªùi ƒë√∫ng: ${data.correctAnswer}\nGi·∫£i th√≠ch: ${data.explanation}`);

      updateState({
        matchStatus: 'eliminated',
        isMatchStarted: false
      });

      setTimeout(() => {
        navigate(data.redirectTo || '/student/dashboard');
      }, 5000);
    };

    // ƒêƒÉng k√Ω t·∫•t c·∫£ event listeners cho student namespace (ch·ªâ 1 socket duy nh·∫•t)
    socket.on('match:timerUpdated', handleTimerUpdated);
    socket.on('match:ended', handleMatchEnded);
    socket.on('match:timerPaused', handleTimerPaused);
    socket.on('match:timerResumed', handleTimerResumed);
    socket.on('match:timeUp', handleTimeUp);
    socket.on('match:answerSubmitted', handleAnswerSubmitted);
    socket.on('contestant:eliminated', handleContestantEliminated);
    socket.on('student:eliminated', handleStudentEliminated);

    // Backup global listener cho global events (kh√¥ng c·∫ßn matchId check)
    socket.on('match:globalStarted', (data: MatchStartedEvent) => {
      console.log('üåç [REALTIME H·ªåC SINH] Global match started event received (backup):', data);
      handleMatchStarted(data);
    });

    socket.on('match:globalQuestionChanged', (data: QuestionChangedEvent) => {
      console.log('üåç [REALTIME H·ªåC SINH] Global question changed event received (backup):', data);
      if (data.matchId === matchId) {
        console.log('üåç [REALTIME H·ªåC SINH] Global question matched our matchId - processing...');
        handleQuestionChanged(data);
      } else {
        console.log('üåç [REALTIME H·ªåC SINH] Global question for different match - ignoring');
      }
    });

    console.log('‚úÖ [REALTIME H·ªåC SINH] ƒê√£ ƒëƒÉng k√Ω t·∫•t c·∫£ event listeners cho student namespace');

    return () => {
      // Cleanup event listeners
      console.log('üßπ [REALTIME H·ªåC SINH] D·ªçn d·∫πp event listeners...');
      socket.off('match:timerUpdated', handleTimerUpdated);
      socket.off('match:ended', handleMatchEnded);
      socket.off('match:timerPaused', handleTimerPaused);
      socket.off('match:timerResumed', handleTimerResumed);
      socket.off('match:timeUp', handleTimeUp);
      socket.off('match:answerSubmitted', handleAnswerSubmitted);
      socket.off('contestant:eliminated', handleContestantEliminated);
      socket.off('student:eliminated', handleStudentEliminated);
      socket.off('match:globalStarted', handleMatchStarted);
      socket.off('match:globalQuestionChanged', handleQuestionChanged);
      
      console.log('üßπ [REALTIME H·ªåC SINH] ƒê√£ d·ªçn d·∫πp t·∫•t c·∫£ event listeners');
    };
  }, [socket, matchId, updateState, navigate]);

  return {
    realTimeState,
    isConnected,
    joinMatchRoom,
    leaveMatchRoom,
  };
}; 