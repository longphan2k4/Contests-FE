import axiosStudent, { debugStudentToken } from "../../../config/axiosStudent";

// Types - C·∫≠p nh·∫≠t interface ƒë·ªÉ ph√π h·ª£p v·ªõi API backend
export interface SubmitAnswerRequest {
  matchId: number;
  questionOrder: number;
  answer: string;
  selectedOptions?: number[];
  correctAnswers?: number[];
}

export interface SubmitAnswerResponse {
  success: boolean;
  message: string;
  alreadyAnswered?: boolean;
  data: {
    result: {
      isCorrect: boolean;
      score: number;
      eliminated: boolean;
      correctAnswer: number[] | string;
      explanation: string;
      submittedAt: string;
      questionOrder: number;
      studentsEliminated?: string[];
    };
  };
}

export interface ApiResponse<T> {
  success: boolean;
  message: string;
  data: T;
  timestamp: string;
}

/**
 * Submit answer API service
 * Thay th·∫ø cho socket submit
 */
export class SubmitAnswerService {
  /**
   * G·ª≠i c√¢u tr·∫£ l·ªùi c·ªßa th√≠ sinh
   */
  static async submitAnswer(
    matchId: number,
    questionOrder: number,
    answer: string,
    selectedOptions?: number[],
    correctAnswers?: number[]
  ): Promise<SubmitAnswerResponse> {
    try {
      debugStudentToken();

      const requestData: SubmitAnswerRequest = {
        matchId,
        questionOrder,
        answer,
        ...(selectedOptions && { selectedOptions }),
        ...(correctAnswers && { correctAnswers })
      };


      // S·ª≠ d·ª•ng axiosStudent (ƒë√£ c√≥ interceptor token s·∫µn)
      const response = await axiosStudent.post<SubmitAnswerResponse>(
        "/results/submit-answer",
        requestData
      );


      return response.data;

    } catch (error: unknown) {

      // X·ª≠ l√Ω l·ªói t·ª´ server
      if (error && typeof error === 'object' && 'response' in error) {
        const axiosError = error as { response?: { data?: { message?: string }; status?: number } };
        return {
          success: false,
          message: axiosError.response?.data?.message || 'C√≥ l·ªói t·ª´ server',
          data: {
            result: {
              isCorrect: false,
              score: 0,
              eliminated: false,
              correctAnswer: correctAnswers || answer,
              explanation: '',
              submittedAt: new Date().toISOString(),
              questionOrder: questionOrder,
              studentsEliminated: []
            }
          }
        };
      }

      // X·ª≠ l√Ω l·ªói network
      const errorMessage = error instanceof Error ? error.message : 'L·ªói kh√¥ng x√°c ƒë·ªãnh';
      console.error('Network Error:', errorMessage);
      return {
        success: false,
        message: 'L·ªói k·∫øt n·ªëi m·∫°ng',
        data: {
          result: {
            isCorrect: false,
            score: 0,
            eliminated: false,
            correctAnswer: correctAnswers || answer,
            explanation: '',
            submittedAt: new Date().toISOString(),
            questionOrder: questionOrder,
            studentsEliminated: []
          }
        }
      };
    }
  }

  /**
   * Ki·ªÉm tra tr·∫°ng th√°i submit (c√≥ th·ªÉ d√πng ƒë·ªÉ check ƒë√£ submit ch∆∞a)
   */
  static async checkSubmissionStatus(): Promise<boolean> {
    try {
      // C√≥ th·ªÉ implement API ri√™ng ƒë·ªÉ check tr·∫°ng th√°i ƒë√£ submit
      // Hi·ªán t·∫°i return false ƒë·ªÉ cho ph√©p submit
      return false;
    } catch (error) {
      console.error('L·ªói khi check submission status:', error);
      return false;
    }
  }
}

// üõ°Ô∏è NEW: Types cho Ban Contestant API
export interface BanContestantRequest {
  matchId: number;
  violationType: string;
  violationCount: number;
  reason: string;
  bannedBy?: string;
}

export interface BanContestantResponse {
  success: boolean;
  message: string;
  data?: {
    contestantId: number;
    matchId: number;
    bannedAt: string;
    reason: string;
    violationType: string;
    violationCount: number;
  };
}

/**
 * üõ°Ô∏è NEW: Ban Contestant API service
 * D√πng ƒë·ªÉ ban th√≠ sinh do vi ph·∫°m anti-cheat
 */
export class BanContestantService {
  /**
   * Ban th√≠ sinh do vi ph·∫°m anti-cheat
   */
  static async banContestant(
    matchId: number,
    violationType: string,
    violationCount: number,
    reason: string,
    bannedBy?: string
  ): Promise<BanContestantResponse> {
    try {
      debugStudentToken();

      const requestData: BanContestantRequest = {
        matchId,
        violationType,
        violationCount,
        reason,
        bannedBy: bannedBy || 'ANTI_CHEAT_SYSTEM'
      };


      // S·ª≠ d·ª•ng axiosStudent (ƒë√£ c√≥ interceptor token s·∫µn)
      const response = await axiosStudent.post<BanContestantResponse>(
        "/results/ban-contestant",
        requestData
      );


      return response.data;

    } catch (error: unknown) {

      // X·ª≠ l√Ω l·ªói t·ª´ server
      if (error && typeof error === 'object' && 'response' in error) {
        const axiosError = error as { response?: { data?: { message?: string }; status?: number } };
        return {
          success: false,
          message: axiosError.response?.data?.message || 'C√≥ l·ªói t·ª´ server khi ban contestant'
        };
      }

      // X·ª≠ l√Ω l·ªói network
      const errorMessage = error instanceof Error ? error.message : 'L·ªói kh√¥ng x√°c ƒë·ªãnh';
      console.error('[BAN SERVICE] Network Error:', errorMessage);
      return {
        success: false,
        message: 'L·ªói k·∫øt n·ªëi m·∫°ng khi ban contestant'
      };
    }
  }
}

export default SubmitAnswerService; 