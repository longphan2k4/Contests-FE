import React, { useState, useEffect } from "react";
import {
  Box,
  Typography,
  Card,
  CardContent,
  Button,
  LinearProgress,
  Alert,
  Radio,
  RadioGroup,
  FormControl,
  FormControlLabel,
  Chip,
  Divider,
  IconButton,
  AlertTitle,
  Dialog,
  DialogContent,
} from "@mui/material";
import {
  CheckCircle,
  Cancel,
  Timer,
  Quiz,
  Send,
  Star,
  Person,
  Notifications,
  Close,
  ZoomIn,
  PlayArrow,
  VolumeUp,
} from "@mui/icons-material";
import { PhotoIcon } from "@heroicons/react/24/outline";
import { useStudentSocket } from "../hooks/useStudentSocket";
import { useStudentMatch } from "../hooks/useStudentMatch";
import { SubmitAnswerService } from "../services/submitAnswerService";
import { useNotification } from "../../../contexts/NotificationContext";
import type { SubmitAnswerResponse } from "../services/submitAnswerService";

interface MediaData {
  id: string;
  type: "image" | "video" | "audio";
  url: string;
  thumbnail?: string;
  title?: string;
  description?: string;
}

interface QuestionData {
  id: number;
  content: string;
  intro?: string;
  questionType: string;
  difficulty: string;
  score: number;
  defaultTime: number;
  options: string[];
  correctAnswer?: string;
  explanation?: string;
  media?: MediaData[];
}

interface CurrentQuestionData {
  order: number;
  question: QuestionData;
}

interface QuestionAnswerProps {
  currentQuestion: CurrentQuestionData | null;
  remainingTime: number;
  matchId: number;
  isConnected: boolean;
}

interface OtherStudentAnswer {
  studentName: string;
  isCorrect: boolean;
  questionOrder: number;
  submittedAt: string;
  contestantId: number;
}

const QuestionAnswer: React.FC<QuestionAnswerProps> = ({
  currentQuestion,
  remainingTime,
  matchId,
  isConnected,
}) => {
  console.log(
    "üîç [COMPONENT v2024-12-20-16:45] QuestionAnswer render v·ªõi props:",
    {
      hasCurrentQuestion: !!currentQuestion,
      remainingTime,
      matchId,
      isConnected,
      timestamp: new Date().toISOString(),
    }
  );

  const [selectedAnswer, setSelectedAnswer] = useState<string>("");
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [hasJoinedMatch, setHasJoinedMatch] = useState(false);
  const [answerResult, setAnswerResult] = useState<{
    isCorrect: boolean;
    correctAnswer: string | number[];
    explanation?: string;
    score: number;
    eliminated: boolean;
    questionOrder: number;
    submittedAt: string;
  } | null>(null);

  // üî• NEW: State ƒë·ªÉ track elimination status
  const [isEliminated, setIsEliminated] = useState(false);
  const [eliminationMessage, setEliminationMessage] = useState<string>("");

  // NEW: State ƒë·ªÉ l∆∞u k·∫øt qu·∫£ t·∫°m th·ªùi t·ª´ server (ch∆∞a hi·ªÉn th·ªã)
  const [pendingResult, setPendingResult] = useState<{
    isCorrect: boolean;
    correctAnswer: string | number[];
    explanation?: string;
    score: number;
    eliminated: boolean;
    questionOrder: number;
    submittedAt: string;
  } | null>(null);

  // NEW: State ƒë·ªÉ l∆∞u th√¥ng b√°o v·ªÅ th√≠ sinh kh√°c
  const [otherStudentAnswers, setOtherStudentAnswers] = useState<
    OtherStudentAnswer[]
  >([]);
  const [latestAnswer, setLatestAnswer] = useState<OtherStudentAnswer | null>(
    null
  );
  const [showNotification, setShowNotification] = useState(false);

  // üöÄ NEW: State cho API submission
  const [isApiSubmitting, setIsApiSubmitting] = useState(false);

  // üî• NEW: State ƒë·ªÉ ki·ªÉm so√°t vi·ªác hi·ªÉn th·ªã k·∫øt qu·∫£ (ch·ªâ khi h·∫øt th·ªùi gian)
  const [canShowResult, setCanShowResult] = useState(false);

  // State cho media modal
  const [selectedMedia, setSelectedMedia] = useState<MediaData | null>(null);
  const [mediaModalOpen, setMediaModalOpen] = useState(false);

  const {
    socket: studentSocket,
    isConnected: isStudentSocketConnected,
    joinMatchForAnswering,
  } = useStudentSocket();

  // Ch·ªâ l·∫•y isSubmitting t·ª´ useStudentMatch, kh√¥ng d√πng submitAnswer
  const { isSubmitting } = useStudentMatch();

  // üî• NEW: S·ª≠ d·ª•ng notification context
  const {
    showSuccessNotification,
    showErrorNotification,
    showWarningNotification,
  } = useNotification();

  // Join match ƒë·ªÉ c√≥ th·ªÉ submit answer (set socket.matchId) - ch·∫°y ngay khi component mount
  useEffect(() => {
    console.log("üîç [COMPONENT] useEffect joinMatchForAnswering triggered:", {
      isStudentSocketConnected: isStudentSocketConnected,
      matchId,
      hasJoinMatchForAnswering: !!joinMatchForAnswering,
      socketRef: !!studentSocket,
      hasJoinedMatch,
    });

    if (
      isStudentSocketConnected &&
      matchId &&
      joinMatchForAnswering &&
      !hasJoinedMatch
    ) {
      console.log(
        "üéØ [COMPONENT] ƒêang join match ƒë·ªÉ c√≥ th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi...",
        matchId
      );
      joinMatchForAnswering(matchId, (response) => {
        console.log("üì® [COMPONENT] Join match response:", response);
        if (response?.success) {
          console.log("‚úÖ [COMPONENT] ƒê√£ join match th√†nh c√¥ng ƒë·ªÉ tr·∫£ l·ªùi");
          setHasJoinedMatch(true);
        } else {
          console.error(
            "‚ùå [COMPONENT] Kh√¥ng th·ªÉ join match ƒë·ªÉ tr·∫£ l·ªùi:",
            response?.message
          );
        }
      });
    } else {
      console.log("‚ö†Ô∏è [COMPONENT] Ch∆∞a th·ªÉ join match - ch·ªù k·∫øt n·ªëi:", {
        isStudentSocketConnected: isStudentSocketConnected,
        matchId,
        hasJoinMatchForAnswering: !!joinMatchForAnswering,
        hasJoinedMatch,
      });
    }
  }, [
    isStudentSocketConnected,
    matchId,
    joinMatchForAnswering,
    hasJoinedMatch,
    studentSocket,
  ]);

  // Reset khi c√≥ c√¢u h·ªèi m·ªõi
  useEffect(() => {
    if (currentQuestion) {
      setSelectedAnswer("");
      setIsSubmitted(false);
      setAnswerResult(null);
      setPendingResult(null); // Reset k·∫øt qu·∫£ t·∫°m th·ªùi
      setOtherStudentAnswers([]); // Reset th√¥ng b√°o th√≠ sinh kh√°c
      setLatestAnswer(null);
      setShowNotification(false);
      setCanShowResult(false); // üî• NEW: Reset tr·∫°ng th√°i hi·ªÉn th·ªã k·∫øt qu·∫£
      // üî• NEW: Reset elimination state khi chuy·ªÉn c√¢u h·ªèi (n·∫øu kh√¥ng b·ªã lo·∫°i)
      if (!isEliminated) {
        console.log(
          "üîÑ [COMPONENT] Reset tr·∫°ng th√°i cho c√¢u h·ªèi m·ªõi:",
          currentQuestion.order
        );
      }
    }
  }, [currentQuestion, isEliminated]);

  // üî• NEW: Set canShowResult khi h·∫øt th·ªùi gian
  useEffect(() => {
    if (remainingTime === 0 && !canShowResult) {
      console.log("‚è∞ [COMPONENT] Cho ph√©p hi·ªÉn th·ªã k·∫øt qu·∫£ v√¨ h·∫øt th·ªùi gian");
      setCanShowResult(true);
    }
  }, [remainingTime, canShowResult]);

  // üî• NEW: Listen for elimination events
  useEffect(() => {
    if (!studentSocket) return;

    const handleStudentEliminated = (data: {
      message: string;
      questionOrder: number;
      eliminatedAt: string;
      correctAnswer: string;
      explanation?: string;
      redirectTo?: string;
    }) => {
      console.log("üö´ [ELIMINATION] Th√≠ sinh b·ªã lo·∫°i:", data);

      setIsEliminated(true);
      setEliminationMessage(data.message);

      // Hi·ªÉn th·ªã th√¥ng b√°o elimination
      alert(
        `üö´ ${data.message}\n\nƒê√°p √°n ƒë√∫ng: ${data.correctAnswer}\n${
          data.explanation || ""
        }`
      );

      // C√≥ th·ªÉ redirect sau m·ªôt kho·∫£ng th·ªùi gian
      if (data.redirectTo) {
        setTimeout(() => {
          if (data.redirectTo) {
            window.location.href = data.redirectTo;
          }
        }, 5000); // 5 gi√¢y
      }
    };

    studentSocket.on("student:eliminated", handleStudentEliminated);

    return () => {
      studentSocket.off("student:eliminated", handleStudentEliminated);
    };
  }, [studentSocket]);

  // NEW: Logic hi·ªÉn th·ªã k·∫øt qu·∫£ khi th·ªùi gian < 1 gi√¢y
  useEffect(() => {
    if (pendingResult && canShowResult && !answerResult) {
      console.log("‚è∞ [RESULT] Hi·ªÉn th·ªã k·∫øt qu·∫£ v√¨ canShowResult = true");
      setAnswerResult(pendingResult);
      setPendingResult(null);

      // üî• NEW: Th√¥ng b√°o k·∫øt qu·∫£
      if (pendingResult.isCorrect) {
        showSuccessNotification(
          `üéâ Ch√≠nh x√°c! B·∫°n ƒë∆∞·ª£c +${pendingResult.score} ƒëi·ªÉm`,
          "C√¢u tr·∫£ l·ªùi ƒë√∫ng!",
          4000
        );
      } else {
        showErrorNotification(
          `‚ùå C√¢u tr·∫£ l·ªùi ch∆∞a ƒë√∫ng. ƒê√°p √°n ƒë√∫ng: "${pendingResult.correctAnswer}"`,
          "C√¢u tr·∫£ l·ªùi sai",
          4000
        );
      }

      // üî• NEW: Update elimination status t·ª´ result v·ªõi delay ƒë·ªÉ user th·∫•y k·∫øt qu·∫£ tr∆∞·ªõc
      if (pendingResult.eliminated) {
        setTimeout(() => {
          setIsEliminated(true);
          // üî• NEW: Th√¥ng b√°o b·ªã lo·∫°i v·ªõi delay
          showWarningNotification(
            "‚ö†Ô∏è B·∫°n ƒë√£ b·ªã lo·∫°i kh·ªèi tr·∫≠n ƒë·∫•u! B·∫°n v·∫´n c√≥ th·ªÉ theo d√µi c√°c c√¢u h·ªèi ti·∫øp theo.",
            "B·ªã lo·∫°i",
            6000
          );
          console.log(
            "üö´ [ELIMINATION] Hi·ªÉn th·ªã th√¥ng b√°o lo·∫°i sau khi show k·∫øt qu·∫£"
          );
        }, 4000); // Delay 4 gi√¢y ƒë·ªÉ user ƒë·ªçc k·∫øt qu·∫£ tr∆∞·ªõc
      }
    }
  }, [
    pendingResult,
    canShowResult,
    answerResult,
    showSuccessNotification,
    showErrorNotification,
    showWarningNotification,
  ]);

  // T·ª± ƒë·ªông submit khi h·∫øt th·ªùi gian
  useEffect(() => {
    if (
      remainingTime === 0 &&
      !isSubmitted &&
      !isEliminated &&
      currentQuestion // ‚ùå B·ªé ƒëi·ªÅu ki·ªán selectedAnswer
    ) {
      console.log(
        "‚è∞ [COMPONENT] T·ª± ƒë·ªông submit khi h·∫øt th·ªùi gian" +
          (selectedAnswer
            ? ` v·ªõi ƒë√°p √°n: ${selectedAnswer}`
            : " KH√îNG C√ì ƒê√ÅP √ÅN")
      );
      handleSubmitAnswer(selectedAnswer || "[KH√îNG CH·ªåN ƒê√ÅP √ÅN]"); // üîß Submit v·ªõi ƒë√°p √°n m·∫∑c ƒë·ªãnh
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [
    remainingTime,
    isSubmitted,
    isEliminated,
    currentQuestion, // ‚ùå B·ªé selectedAnswer kh·ªèi dependency
  ]);

  // NEW: Listen for other students' answers
  useEffect(() => {
    if (!studentSocket) return;

    const handleOtherStudentAnswer = (data: {
      contestantId: number;
      studentName: string;
      questionOrder: number;
      isCorrect: boolean;
      submittedAt: string;
      matchId: number;
    }) => {
      console.log("üìù [H·ªåC SINH] Th√≠ sinh kh√°c ƒë√£ g·ª≠i c√¢u tr·∫£ l·ªùi:", {
        studentName: data.studentName,
        isCorrect: data.isCorrect,
        questionOrder: data.questionOrder,
      });

      // Ch·ªâ hi·ªÉn th·ªã n·∫øu l√† c√¢u h·ªèi hi·ªán t·∫°i v√† ch∆∞a submit
      if (
        data.questionOrder === currentQuestion?.order &&
        data.matchId === matchId &&
        !isSubmitted
      ) {
        const newAnswer: OtherStudentAnswer = {
          studentName: data.studentName,
          isCorrect: data.isCorrect,
          questionOrder: data.questionOrder,
          submittedAt: data.submittedAt,
          contestantId: data.contestantId,
        };

        // C·∫≠p nh·∫≠t danh s√°ch
        setOtherStudentAnswers((prev) => {
          const existingIndex = prev.findIndex(
            (answer) => answer.contestantId === data.contestantId
          );

          if (existingIndex >= 0) {
            const updated = [...prev];
            updated[existingIndex] = newAnswer;
            return updated;
          } else {
            return [...prev, newAnswer];
          }
        });

        // Hi·ªÉn th·ªã notification toast
        setLatestAnswer(newAnswer);
        setShowNotification(true);

        // T·ª± ƒë·ªông ·∫©n notification sau 3 gi√¢y
        setTimeout(() => {
          setShowNotification(false);
        }, 3000);
      }
    };

    studentSocket.on("match:answerSubmitted", handleOtherStudentAnswer);

    return () => {
      studentSocket.off("match:answerSubmitted", handleOtherStudentAnswer);
    };
  }, [studentSocket, currentQuestion?.order, matchId, isSubmitted]);

  const handleAnswerSelect = (answer: string) => {
    // üî• NEW: Block eliminated students from selecting answers
    if (isEliminated) {
      console.log("üö´ [BLOCKED] Th√≠ sinh ƒë√£ b·ªã lo·∫°i kh√¥ng th·ªÉ ch·ªçn ƒë√°p √°n");
      alert(`üö´ ${eliminationMessage || "B·∫°n ƒë√£ b·ªã lo·∫°i kh·ªèi tr·∫≠n ƒë·∫•u"}`);
      return;
    }

    if (!isSubmitted) {
      setSelectedAnswer(answer);
      console.log("üìù [COMPONENT] Ch·ªçn ƒë√°p √°n:", answer);
    }
  };

  // üöÄ NEW: Submit answer using API instead of socket
  const handleSubmitAnswer = async (currentAnswer?: string) => {
    // üî• Block eliminated students from submitting answers
    if (isEliminated) {
      console.log("üö´ [BLOCKED] Th√≠ sinh ƒë√£ b·ªã lo·∫°i kh√¥ng th·ªÉ submit");
      alert(`üö´ ${eliminationMessage || "B·∫°n ƒë√£ b·ªã lo·∫°i kh·ªèi tr·∫≠n ƒë·∫•u"}`);
      return;
    }

    const answerToSubmit = currentAnswer || selectedAnswer;

    console.log("üì§ [API SUBMIT] B·∫Øt ƒë·∫ßu submit answer qua API:", {
      answerToSubmit,
      questionOrder: currentQuestion?.order,
      matchId,
      hasCurrentQuestion: !!currentQuestion,
      isEliminated,
      isNoAnswerSelected: !answerToSubmit, // üîß Log ƒë·ªÉ tracking
    });

    // üîß S·ª¨A: Ch·ªâ c·∫£nh b√°o nh∆∞ng v·∫´n cho ph√©p submit v·ªõi ƒë√°p √°n tr·ªëng
    if (!answerToSubmit || !answerToSubmit.trim()) {
      console.warn(
        "‚ö†Ô∏è [API SUBMIT] Kh√¥ng c√≥ ƒë√°p √°n ƒë∆∞·ª£c ch·ªçn - s·∫Ω submit nh∆∞ tr·∫£ l·ªùi sai"
      );
      // ‚ùå B·ªé alert v√† return, ƒë·ªÉ ti·∫øp t·ª•c submit
      // alert("Vui l√≤ng ch·ªçn m·ªôt ƒë√°p √°n!");
      // return;
    }

    if (!currentQuestion?.question) {
      console.error("‚ùå [API SUBMIT] Kh√¥ng c√≥ c√¢u h·ªèi ƒë·ªÉ tr·∫£ l·ªùi");
      alert("Kh√¥ng c√≥ c√¢u h·ªèi ƒë·ªÉ tr·∫£ l·ªùi!");
      return;
    }

    try {
      console.log("üì§ [API SUBMIT] ƒêang g·ª≠i ƒë√°p √°n qua API...");
      setIsSubmitted(true); // Set submitted tr∆∞·ªõc ƒë·ªÉ tr√°nh double click
      setIsApiSubmitting(true);

      // üîß X·ª¨ L√ù: N·∫øu kh√¥ng c√≥ ƒë√°p √°n, d√πng gi√° tr·ªã m·∫∑c ƒë·ªãnh
      const finalAnswer = answerToSubmit || "[KH√îNG CH·ªåN ƒê√ÅP √ÅN]";

      // Chuy·ªÉn ƒë·ªïi answer th√†nh selectedOptions (ch·ªâ s·ªë c·ªßa ƒë√°p √°n ƒë∆∞·ª£c ch·ªçn)
      const selectedIndex =
        finalAnswer === "[KH√îNG CH·ªåN ƒê√ÅP √ÅN]"
          ? -1 // üîß -1 nghƒ©a l√† kh√¥ng ch·ªçn ƒë√°p √°n n√†o
          : currentQuestion.question.options.indexOf(finalAnswer);
      const selectedOptions = selectedIndex !== -1 ? [selectedIndex] : [];

      // T√¨m correctAnswers (ch·ªâ s·ªë c·ªßa ƒë√°p √°n ƒë√∫ng)
      const correctAnswerIndex = currentQuestion.question.correctAnswer
        ? currentQuestion.question.options.indexOf(
            currentQuestion.question.correctAnswer
          )
        : -1;
      const correctAnswers =
        correctAnswerIndex !== -1 ? [correctAnswerIndex] : [];

      const response: SubmitAnswerResponse =
        await SubmitAnswerService.submitAnswer(
          matchId,
          currentQuestion.order,
          finalAnswer, // üîß D√πng finalAnswer thay v√¨ answerToSubmit
          selectedOptions,
          correctAnswers
        );

      if (response.success) {
        const result = {
          isCorrect: response.data.result.isCorrect,
          correctAnswer: response.data.result.correctAnswer || "",
          explanation: response.data.result.explanation || "",
          score: response.data.result.score || 0,
          eliminated: response.data.result.eliminated || false,
          questionOrder: currentQuestion.order,
          submittedAt: response.data.result.submittedAt,
        };

        // L∆∞u k·∫øt qu·∫£ v√†o pendingResult thay v√¨ answerResult ƒë·ªÉ ƒë·ª£i th·ªùi gian < 1s
        console.log(
          "üìã [API SUBMIT] L∆∞u k·∫øt qu·∫£ v√†o pendingResult, ƒë·ª£i h·∫øt th·ªùi gian ƒë·ªÉ hi·ªÉn th·ªã"
        );
        setPendingResult(result);

        // üî• NEW: Th√¥ng b√°o ƒë√£ g·ª≠i c√¢u tr·∫£ l·ªùi th√†nh c√¥ng
        showSuccessNotification(
          finalAnswer === "[KH√îNG CH·ªåN ƒê√ÅP √ÅN]"
            ? "ƒê√£ b·ªè qua c√¢u h·ªèi n√†y!"
            : `ƒê√£ g·ª≠i ƒë√°p √°n: "${finalAnswer}"`,
          "G·ª≠i th√†nh c√¥ng",
          3000
        );

        if (result.isCorrect) {
          console.log(
            `‚úÖ [API SUBMIT] C√¢u tr·∫£ l·ªùi ch√≠nh x√°c! ƒêi·ªÉm: ${result.score} (s·∫Ω hi·ªÉn th·ªã khi h·∫øt th·ªùi gian)`
          );
        } else {
          console.log(
            `‚ùå [API SUBMIT] C√¢u tr·∫£ l·ªùi sai. ƒê√°p √°n ƒë√∫ng: ${result.correctAnswer} (s·∫Ω hi·ªÉn th·ªã khi h·∫øt th·ªùi gian)`
          );
        }
      } else {
        console.error("‚ùå [API SUBMIT] G·ª≠i ƒë√°p √°n th·∫•t b·∫°i:", response.message);
        // üî• NEW: Th√¥ng b√°o l·ªói khi g·ª≠i th·∫•t b·∫°i
        showErrorNotification(
          `Kh√¥ng th·ªÉ g·ª≠i ƒë√°p √°n: ${response.message}`,
          "L·ªói g·ª≠i ƒë√°p √°n"
        );
      }
    } catch (error) {
      console.error("üí• [API SUBMIT] L·ªói khi submit answer:", error);
      // üî• NEW: Th√¥ng b√°o l·ªói k·∫øt n·ªëi
      showErrorNotification(
        "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet!",
        "L·ªói k·∫øt n·ªëi"
      );
      alert("L·ªói k·∫øt n·ªëi. Vui l√≤ng th·ª≠ l·∫°i!");
    } finally {
      setIsApiSubmitting(false);
    }
  };

  const getOptionClass = (option: string) => {
    if (!canShowResult) {
      return selectedAnswer === option
        ? "bg-blue-100 border-blue-500 text-blue-800 shadow-md"
        : "bg-gray-50 border-gray-200 hover:bg-gray-100 hover:border-gray-300";
    }

    // ƒê√£ submit - hi·ªÉn th·ªã k·∫øt qu·∫£ v·ªõi m√†u s·∫Øc r√µ r√†ng
    const isCorrectAnswer = option === answerResult?.correctAnswer;
    const isUserSelection = option === selectedAnswer;

    if (isCorrectAnswer) {
      return "bg-green-100 border-green-500 text-green-800 shadow-lg border-2";
    }

    if (isUserSelection && !answerResult?.isCorrect) {
      return "bg-red-100 border-red-500 text-red-800 shadow-lg border-2";
    }

    return "bg-gray-50 border-gray-200 text-gray-500 opacity-60";
  };

  const getResultIcon = (option: string) => {
    if (!canShowResult || !answerResult) return null;

    const isCorrectAnswer = option === answerResult.correctAnswer;
    const isUserSelection = option === selectedAnswer;

    if (isCorrectAnswer) {
      return (
        <Box className="flex items-center gap-2">
          <CheckCircle className="text-green-600 text-xl" />
          <Chip
            label="ƒê√öNG"
            size="small"
            className="bg-green-600 text-white font-bold"
          />
        </Box>
      );
    }

    if (isUserSelection && !answerResult.isCorrect) {
      return (
        <Box className="flex items-center gap-2">
          <Cancel className="text-red-600 text-xl" />
          <Chip
            label="SAI"
            size="small"
            className="bg-red-600 text-white font-bold"
          />
        </Box>
      );
    }

    return null;
  };

  const getTimerColor = () => {
    if (remainingTime <= 10) return "error";
    if (remainingTime <= 30) return "warning";
    return "primary";
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, "0")}`;
  };

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty.toLowerCase()) {
      case "alpha":
        return "success";
      case "beta":
        return "warning";
      case "gamma":
        return "error";
      default:
        return "default";
    }
  };

  // X·ª≠ l√Ω media
  const handleMediaClick = (media: MediaData) => {
    setSelectedMedia(media);
    setMediaModalOpen(true);
  };

  const handleCloseMediaModal = () => {
    setMediaModalOpen(false);
    setSelectedMedia(null);
  };

  // Component MediaGrid t·ªëi ∆∞u cho mobile
  const MediaGrid: React.FC<{ mediaList: MediaData[] }> = ({ mediaList }) => {
    if (!mediaList || mediaList.length === 0) return null;

    const getGridLayout = (count: number) => {
      // T·ªëi ∆∞u cho mobile: lu√¥n 1 c·ªôt tr√™n mobile, 2 c·ªôt tr√™n tablet+
      switch (count) {
        case 1:
          return "grid-cols-1";
        case 2:
          return "grid-cols-1 sm:grid-cols-2";
        case 3:
          return "grid-cols-1 sm:grid-cols-2 md:grid-cols-3";
        case 4:
        default:
          return "grid-cols-1 sm:grid-cols-2 md:grid-cols-2 lg:grid-cols-4";
      }
    };

    const renderMediaItem = (media: MediaData, index: number) => {
      const commonClasses =
        "relative cursor-pointer rounded-lg overflow-hidden border-2 border-gray-200 hover:border-blue-400 transition-all duration-200 group active:scale-95";

      return (
        <Box
          key={media.id}
          className={commonClasses}
          onClick={() => handleMediaClick(media)}
          sx={{ touchAction: "manipulation" }} // T·ªëi ∆∞u cho touch
        >
          {/* Overlay v·ªõi icon - larger cho mobile */}
          <Box className="absolute inset-0  bg-opacity-50 opacity-0 group-hover:opacity-100 group-active:opacity-100 transition-opacity duration-200 z-10 flex items-center justify-center">
            <Box className="flex flex-col items-center text-white">
              {media.type === "image" && <ZoomIn className="text-4xl mb-2" />}
              {media.type === "video" && (
                <PlayArrow className="text-4xl mb-2" />
              )}
              {media.type === "audio" && <VolumeUp className="text-4xl mb-2" />}
              <Typography
                variant="body2"
                className="text-center px-2 font-medium"
              >
                {media.type === "image" && "Xem ·∫£nh"}
                {media.type === "video" && "Ph√°t video"}
                {media.type === "audio" && "Nghe audio"}
              </Typography>
            </Box>
          </Box>

          {/* Media content - responsive height */}
          {media.type === "image" && (
            <>
              <div className="flex justify-center items-center w-full h-64 rounded-xl overflow-hidden bg-white">
                <img
                  src={media.url}
                  alt={media.title || `Media ${index + 1}`}
                  className="max-w-full h-full object-contain object-center bg-white"
                  onClick={() => handleMediaClick(media)}
                />
                {/* Icon g√≥c ph·∫£i */}
                <div className="absolute top-3 right-3 bg-white/90 backdrop-blur-sm px-2 py-1 rounded-full">
                  <PhotoIcon className="w-4 h-4 text-gray-600" />
                </div>
                {/* Counter n·∫øu c√≥ nhi·ªÅu ·∫£nh */}
                {currentQuestion &&
                  currentQuestion.question.media &&
                  currentQuestion.question.media.length > 1 && (
                    <div className="absolute top-3 left-3 bg-white/90 backdrop-blur-sm px-2 py-1 rounded-full">
                      <span className="text-xs font-medium text-gray-700">
                        {index + 1}/{currentQuestion.question.media.length}
                      </span>
                    </div>
                  )}
              </div>
            </>
          )}

          {media.type === "video" && (
            <Box className="relative">
              <video
                src={media.url}
                poster={media.thumbnail}
                className="w-full h-32 xs:h-36 sm:h-40 md:h-44 object-cover"
                muted
                preload="metadata"
              />
              <Box className="absolute inset-0 flex items-center justify-center">
                <PlayArrow className="text-white text-5xl bg-black bg-opacity-60 rounded-full p-3" />
              </Box>
            </Box>
          )}

          {media.type === "audio" && (
            <Box className="h-32 xs:h-36 sm:h-40 md:h-44 bg-gradient-to-br from-purple-400 to-purple-600 flex flex-col items-center justify-center text-white">
              <VolumeUp className="text-5xl mb-3" />
              <Typography
                variant="body2"
                className="text-center px-3 font-medium"
              >
                {media.title || "File √¢m thanh"}
              </Typography>
            </Box>
          )}
        </Box>
      );
    };

    return (
      <Box className="space-y-3">
        <Box
          className={`grid gap-3 ${getGridLayout(
            mediaList.slice(0, 4).length
          )}`}
        >
          {mediaList
            .slice(0, 4)
            .map((media, index) => renderMediaItem(media, index))}
        </Box>
        {mediaList.length > 4 && (
          <Typography variant="caption" className="text-gray-500 italic">
            * Hi·ªÉn th·ªã 4/{mediaList.length} media ƒë·∫ßu ti√™n
          </Typography>
        )}
      </Box>
    );
  };

  // Media Modal t·ªëi ∆∞u cho mobile
  const MediaModal: React.FC = () => {
    if (!selectedMedia) return null;

    return (
      <Dialog
        open={mediaModalOpen}
        onClose={handleCloseMediaModal}
        maxWidth="lg"
        fullWidth
        fullScreen // Full screen tr√™n mobile ƒë·ªÉ t·ªëi ∆∞u
        PaperProps={{
          className: "m-0 sm:m-2 max-h-screen sm:max-h-[90vh] sm:rounded-lg",
        }}
      >
        <DialogContent className="p-2 sm:p-4 relative h-full flex flex-col">
          {/* Close Button - larger cho mobile */}
          <IconButton
            onClick={handleCloseMediaModal}
            className="absolute top-2 right-2 z-10 bg-black bg-opacity-60 text-white hover:bg-opacity-80"
            size="large"
          >
            <Close />
          </IconButton>

          {/* Media Content */}
          <Box className="flex-1 flex flex-col items-center justify-center p-4">
            {selectedMedia.type === "image" && (
              <img
                src={selectedMedia.url}
                alt={selectedMedia.title || "Media"}
                className="max-w-full max-h-full object-contain rounded-lg"
                style={{ maxHeight: "calc(100vh - 150px)" }}
              />
            )}

            {selectedMedia.type === "video" && (
              <video
                src={selectedMedia.url}
                controls
                autoPlay
                playsInline // Quan tr·ªçng cho mobile
                className="max-w-full max-h-full rounded-lg"
                style={{ maxHeight: "calc(100vh - 150px)" }}
                poster={selectedMedia.thumbnail}
              />
            )}

            {selectedMedia.type === "audio" && (
              <Box className="w-full max-w-md p-6 bg-gradient-to-br from-purple-400 to-purple-600 rounded-lg text-white text-center">
                <VolumeUp className="text-8xl mb-4" />
                <Typography variant="h6" className="mb-4 font-bold">
                  {selectedMedia.title || "File √¢m thanh"}
                </Typography>
                <audio
                  src={selectedMedia.url}
                  controls
                  autoPlay
                  className="w-full"
                  style={{ minHeight: "40px" }}
                />
              </Box>
            )}
          </Box>

          {/* Media Info - Bottom section */}
          {(selectedMedia.title || selectedMedia.description) && (
            <Box className="bg-gray-50 p-4 rounded-t-lg mt-auto">
              {selectedMedia.title && (
                <Typography
                  variant="h6"
                  className="font-bold text-gray-800 mb-2"
                >
                  {selectedMedia.title}
                </Typography>
              )}
              {selectedMedia.description && (
                <Typography variant="body2" className="text-gray-600">
                  {selectedMedia.description}
                </Typography>
              )}
            </Box>
          )}
        </DialogContent>
      </Dialog>
    );
  };

  if (!currentQuestion) {
    return (
      <Card className="mb-4">
        <CardContent>
          <Box className="text-center py-8">
            <Quiz className="text-gray-400 mb-2" style={{ fontSize: 48 }} />
            <Typography variant="h6" className="text-gray-500">
              ƒêang ch·ªù c√¢u h·ªèi...
            </Typography>
            <Typography variant="body2" className="text-gray-400">
              Gi√°o vi√™n s·∫Ω b·∫Øt ƒë·∫ßu c√¢u h·ªèi trong gi√¢y l√°t
            </Typography>
          </Box>
        </CardContent>
      </Card>
    );
  }

  return (
    <Box className="space-y-4 relative">
      {/* Toast Notification cho th√≠ sinh kh√°c tr·∫£ l·ªùi */}
      {showNotification && latestAnswer && (
        <Box
          className="fixed top-4 right-4 z-50 bg-white border-l-4 border-orange-500 shadow-lg rounded-lg p-4 min-w-80 animate-slide-in-right"
          style={{ zIndex: 9999 }}
        >
          <Box className="flex items-center justify-between">
            <Box className="flex items-center gap-2">
              <Notifications className="text-orange-500 text-xl" />
              <Box>
                <Typography
                  variant="body2"
                  className="font-medium text-gray-800"
                >
                  {latestAnswer.studentName.split(" - ")[0]} ƒë√£ tr·∫£ l·ªùi
                </Typography>
                <Box className="flex items-center gap-2 mt-1">
                  <Chip
                    size="small"
                    label={latestAnswer.isCorrect ? "ƒê√öNG" : "SAI"}
                    color={latestAnswer.isCorrect ? "success" : "error"}
                    className="text-xs font-bold"
                  />
                  <Typography variant="caption" className="text-gray-500">
                    {new Date(latestAnswer.submittedAt).toLocaleTimeString(
                      "vi-VN"
                    )}
                  </Typography>
                </Box>
              </Box>
            </Box>
            <IconButton
              size="small"
              onClick={() => setShowNotification(false)}
              className="text-gray-400 hover:text-gray-600"
            >
              <Cancel />
            </IconButton>
          </Box>
        </Box>
      )}

      {/* Timer v√† th√¥ng tin c√¢u h·ªèi */}
      <Card className="border-l-4 border-l-blue-500">
        <CardContent>
          <Box className="flex items-center justify-between mb-3">
            <Box className="flex items-center gap-2">
              <Quiz className="text-blue-500" />
              <Typography variant="h6" className="text-gray-800 font-semibold">
                C√¢u h·ªèi s·ªë {currentQuestion.order}
              </Typography>
            </Box>

            <Box className="flex items-center gap-2">
              <Chip
                icon={<Timer />}
                label={formatTime(remainingTime)}
                color={getTimerColor()}
                size="small"
                className={remainingTime <= 10 ? "animate-pulse" : ""}
              />
              <Chip
                icon={<Star />}
                label={`${currentQuestion.question.score} ƒëi·ªÉm`}
                variant="outlined"
                size="small"
              />
            </Box>
          </Box>

          <Box className="flex flex-wrap gap-2 mb-3">
            <Chip
              label={`ƒê·ªô kh√≥: ${currentQuestion.question.difficulty}`}
              color={getDifficultyColor(currentQuestion.question.difficulty)}
              size="small"
            />
            <Chip
              label={
                currentQuestion.question.questionType === "multiple_choice"
                  ? "Tr·∫Øc nghi·ªám"
                  : "ƒê√∫ng/Sai"
              }
              variant="outlined"
              size="small"
            />
          </Box>

          {/* Timer Progress */}
          <Box className="mb-3">
            <LinearProgress
              variant="determinate"
              value={Math.max(
                0,
                (remainingTime / currentQuestion.question.defaultTime) * 100
              )}
              color={getTimerColor()}
              className="h-2 rounded"
            />
          </Box>
        </CardContent>
      </Card>

      {/* Compact indicator c·ªßa s·ªë th√≠ sinh ƒë√£ tr·∫£ l·ªùi */}
      {otherStudentAnswers.length > 0 && !isSubmitted && (
        <Alert
          severity="info"
          className="border border-blue-200"
          icon={<Person />}
        >
          <Box className="flex items-center justify-between w-full">
            <Typography variant="body2" className="text-blue-800">
              <strong>{otherStudentAnswers.length}</strong> th√≠ sinh kh√°c ƒë√£
              ho√†n th√†nh c√¢u h·ªèi n√†y
            </Typography>
            <Box className="flex items-center gap-1">
              {otherStudentAnswers.slice(0, 3).map((answer) => (
                <Chip
                  key={answer.contestantId}
                  size="small"
                  label={answer.isCorrect ? "‚úì" : "‚úó"}
                  color={answer.isCorrect ? "success" : "error"}
                  className="text-xs min-w-8"
                />
              ))}
              {otherStudentAnswers.length > 3 && (
                <Typography variant="caption" className="text-gray-500 ml-1">
                  +{otherStudentAnswers.length - 3}
                </Typography>
              )}
            </Box>
          </Box>
        </Alert>
      )}

      {/* N·ªôi dung c√¢u h·ªèi */}
      <Card>
        <CardContent>
          {currentQuestion.question.intro && (
            <Typography variant="body2" className="text-gray-600 mb-3 italic">
              üìù {currentQuestion.question.intro}
            </Typography>
          )}

          <Box
            className="text-gray-800 mb-4 text-lg font-semibold"
            dangerouslySetInnerHTML={{
              __html: currentQuestion.question.content,
            }}
          />

          <Divider className="mb-4" />

          {/* Media Grid */}
          {currentQuestion.question.media &&
            currentQuestion.question.media.length > 0 && (
              <Box className="mb-6 p-4 bg-gray-50 border border-gray-200 rounded-lg">
                <MediaGrid mediaList={currentQuestion.question.media} />
              </Box>
            )}

          {/* C√°c l·ª±a ch·ªçn */}
          {/* üî• NEW: ·∫®n options n·∫øu th√≠ sinh b·ªã lo·∫°i */}
          {!isEliminated && (
            <FormControl component="fieldset" className="w-full">
              <RadioGroup
                value={selectedAnswer}
                onChange={(e) => handleAnswerSelect(e.target.value)}
              >
                <Box className="space-y-3">
                  {currentQuestion.question.options?.map((option, index) => (
                    <Box
                      key={index}
                      className={`p-3 rounded-lg border-2 transition-all cursor-pointer ${getOptionClass(
                        option
                      )}`}
                      onClick={() => !isSubmitted && handleAnswerSelect(option)}
                    >
                      <Box className="flex items-center justify-between">
                        <FormControlLabel
                          value={option}
                          control={<Radio disabled={isSubmitted} />}
                          label={
                            <Typography variant="body1" className="font-medium">
                              {String.fromCharCode(65 + index)}. {option}
                            </Typography>
                          }
                          className="m-0 flex-1"
                        />
                        {getResultIcon(option)}
                      </Box>
                    </Box>
                  ))}
                </Box>
              </RadioGroup>
            </FormControl>
          )}

          {/* üî• NEW: Hi·ªÉn th·ªã th√¥ng b√°o elimination thay cho options */}
          {isEliminated && (
            <Alert
              severity="error"
              icon={<Cancel />}
              className="border-2 border-red-500 bg-red-50 mb-4"
            >
              <AlertTitle>Error</AlertTitle>
              <Box className="space-y-3">
                <Typography variant="h6" className="font-bold text-red-800">
                  B·∫°n ƒë√£ b·ªã lo·∫°i kh·ªèi tr·∫≠n ƒë·∫•u!
                </Typography>
                <Typography variant="body2" className="text-red-600">
                  üí° B·∫°n v·∫´n c√≥ th·ªÉ theo d√µi c√¢u h·ªèi nh∆∞ng kh√¥ng th·ªÉ tr·∫£ l·ªùi.
                </Typography>

                {/* Hi·ªÉn th·ªã ƒë√°p √°n ƒë√∫ng n·∫øu c√≥ */}
                {answerResult?.correctAnswer && (
                  <Box className="bg-red-100 p-3 rounded-lg border border-red-300">
                    <Typography
                      variant="body2"
                      className="text-red-800 font-medium"
                    >
                      üìù ƒê√°p √°n ƒë√∫ng:{" "}
                      <span className="font-bold">
                        {answerResult.correctAnswer}
                      </span>
                    </Typography>
                    {answerResult.explanation && (
                      <Typography variant="body2" className="text-red-700 mt-1">
                        üí° Gi·∫£i th√≠ch: {answerResult.explanation}
                      </Typography>
                    )}
                  </Box>
                )}
              </Box>
            </Alert>
          )}

          {/* N√∫t submit */}
          {/* üî• NEW: ·∫®n submit button n·∫øu th√≠ sinh b·ªã lo·∫°i */}
          {!isSubmitted && !isEliminated && (
            <Box className="flex justify-end mt-4">
              <Button
                variant="contained"
                color="primary"
                size="large"
                startIcon={<Send />}
                onClick={() => handleSubmitAnswer()}
                disabled={!selectedAnswer || isApiSubmitting || isSubmitting}
                className="px-8 py-3"
              >
                {isApiSubmitting || isSubmitting ? "ƒêang x·ª≠ l√Ω..." : "X√°c nh·∫≠n"}
              </Button>
            </Box>
          )}

          {/* Th√¥ng b√°o ƒë√£ g·ª≠i, ƒëang ch·ªù hi·ªÉn th·ªã k·∫øt qu·∫£ */}
          {isSubmitted && pendingResult && !answerResult && !canShowResult && (
            <Alert severity="info" className="mt-3 border-2 border-blue-200">
              <Box className="flex items-center gap-2">
                <Typography
                  variant="body1"
                  className="font-medium text-blue-800"
                >
                  ƒê√£ g·ª≠i{" "}
                  {selectedAnswer === "[KH√îNG CH·ªåN ƒê√ÅP √ÅN]"
                    ? "y√™u c·∫ßu b·ªè qua c√¢u h·ªèi" // üîß Th√¥ng b√°o kh√°c khi kh√¥ng ch·ªçn
                    : "ƒë√°p √°n"}{" "}
                  th√†nh c√¥ng!
                </Typography>
              </Box>
              <Typography variant="body2" className="text-blue-600 mt-1">
                K·∫øt qu·∫£ s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã khi h·∫øt th·ªùi gian...
              </Typography>
            </Alert>
          )}

          {/* K·∫øt qu·∫£ */}
          {canShowResult && answerResult && (
            <Box className="mt-6 space-y-4">
              {/* Alert k·∫øt qu·∫£ ch√≠nh */}
              <Alert
                severity={answerResult.isCorrect ? "success" : "error"}
                className="border-2"
                icon={
                  answerResult.isCorrect ? (
                    <CheckCircle className="text-2xl" />
                  ) : (
                    <Cancel className="text-2xl" />
                  )
                }
              >
                <Box className="space-y-2">
                  <Typography variant="h6" className="font-bold">
                    {answerResult.isCorrect
                      ? `üéâ Ch√≠nh x√°c! +${answerResult.score} ƒëi·ªÉm`
                      : selectedAnswer === "[KH√îNG CH·ªåN ƒê√ÅP √ÅN]"
                      ? " B·∫°n kh√¥ng ch·ªçn ƒë√°p √°n n√†o!" // üîß Th√¥ng b√°o ƒë·∫∑c bi·ªát
                      : " Ch∆∞a ƒë√∫ng r·ªìi!"}
                  </Typography>

                  <Typography variant="body1" className="font-medium">
                    <span className="text-gray-700">ƒê√°p √°n c·ªßa b·∫°n: </span>
                    <span
                      className={
                        answerResult.isCorrect
                          ? "text-green-700"
                          : "text-red-700"
                      }
                    >
                      {selectedAnswer === "[KH√îNG CH·ªåN ƒê√ÅP √ÅN]"
                        ? "‚ùå Kh√¥ng ch·ªçn ƒë√°p √°n n√†o" // üîß Hi·ªÉn th·ªã r√µ r√†ng h∆°n
                        : selectedAnswer}
                    </span>
                  </Typography>

                  {!answerResult.isCorrect && (
                    <Typography variant="body1" className="font-medium">
                      <span className="text-gray-700">ƒê√°p √°n ƒë√∫ng: </span>
                      <span className="text-green-700 font-bold">
                        {answerResult.correctAnswer}
                      </span>
                    </Typography>
                  )}

                  <Box className="flex items-center gap-4 text-sm text-gray-600">
                    <span>
                      üìä ƒêi·ªÉm s·ªë: <strong>{answerResult.score}</strong>
                    </span>
                    <span>
                      üìù C√¢u s·ªë: <strong>{answerResult.questionOrder}</strong>
                    </span>
                    <span>
                      ‚è∞ N·ªôp l√∫c:{" "}
                      <strong>
                        {new Date(
                          answerResult.submittedAt
                        ).toLocaleTimeString()}
                      </strong>
                    </span>
                  </Box>
                </Box>
              </Alert>

              {/* C·∫£nh b√°o b·ªã lo·∫°i */}
              {answerResult.eliminated && (
                <Alert
                  severity="error"
                  className="border-2 border-red-500 bg-red-50"
                >
                  <Typography variant="h6" className="font-bold text-red-800">
                    ‚ö†Ô∏è B·∫°n ƒë√£ b·ªã lo·∫°i kh·ªèi tr·∫≠n ƒë·∫•u!
                  </Typography>
                  <Typography variant="body2" className="text-red-700 mt-1">
                    {selectedAnswer === "[KH√îNG CH·ªåN ƒê√ÅP √ÅN]"
                      ? "Do kh√¥ng ch·ªçn ƒë√°p √°n n√†o" // üîß Th√¥ng b√°o c·ª• th·ªÉ
                      : "Do tr·∫£ l·ªùi sai c√¢u h·ªèi"}
                  </Typography>
                </Alert>
              )}

              {/* Gi·∫£i th√≠ch */}
              {answerResult.explanation && (
                <Box className="bg-blue-50 border-2 border-blue-200 p-4 rounded-lg">
                  <Typography
                    variant="subtitle1"
                    className="text-blue-800 font-bold mb-2 flex items-center gap-2"
                  >
                    üí° Gi·∫£i th√≠ch chi ti·∫øt:
                  </Typography>
                  <Typography
                    variant="body1"
                    className="text-blue-700 leading-relaxed"
                  >
                    {answerResult.explanation}
                  </Typography>
                </Box>
              )}

              {/* Th·ªëng k√™ nhanh */}
              <Box className="bg-gray-50 border border-gray-200 p-4 rounded-lg">
                <Typography
                  variant="subtitle2"
                  className="text-gray-800 font-bold mb-2"
                >
                  üìà Th·ªëng k√™ c√¢u tr·∫£ l·ªùi:
                </Typography>
                <Box className="grid grid-cols-2 gap-4 text-sm">
                  <Box>
                    <span className="text-gray-600">K·∫øt qu·∫£:</span>
                    <span
                      className={`ml-2 font-bold ${
                        answerResult.isCorrect
                          ? "text-green-600"
                          : "text-green-600"
                      }`}
                    >
                      {answerResult.isCorrect ? "ƒê√öNG ‚úì" : "SAI ‚úó"}
                    </span>
                  </Box>
                  <Box>
                    <span className="text-gray-600">ƒêi·ªÉm ƒë∆∞·ª£c:</span>
                    <span className="ml-2 font-bold text-blue-600">
                      {answerResult.score} ƒëi·ªÉm
                    </span>
                  </Box>
                  <Box>
                    <span className="text-gray-600">Tr·∫°ng th√°i:</span>
                    <span
                      className={`ml-2 font-bold ${
                        answerResult.eliminated
                          ? "text-red-600"
                          : "text-green-600"
                      }`}
                    >
                      {answerResult.eliminated ? "B·ªä LO·∫†I" : "TI·∫æP T·ª§C"}
                    </span>
                  </Box>
                  <Box>
                    <span className="text-gray-600">ƒê√°p √°n:</span>
                    <span className="ml-2 font-bold text-gray-800">
                      {selectedAnswer === "[KH√îNG CH·ªåN ƒê√ÅP √ÅN]"
                        ? "Kh√¥ng ch·ªçn" // üîß Hi·ªÉn th·ªã ng·∫Øn g·ªçn
                        : selectedAnswer?.substring(0, 10) +
                          (selectedAnswer?.length > 10 ? "..." : "")}
                    </span>
                  </Box>
                </Box>
              </Box>
            </Box>
          )}
        </CardContent>
      </Card>

      {/* Media Modal */}
      <MediaModal />
    </Box>
  );
};

export default QuestionAnswer;
