import React from "react";
import {
  Box,
  Typography,
  FormControl,
  FormControlLabel,
  Radio,
  RadioGroup,
  Chip,
  Alert,
  AlertTitle,
  Button,
} from "@mui/material";
import { CheckCircle, Cancel, Send } from "@mui/icons-material";

interface QuestionOptionsProps {
  options: string[];
  selectedAnswer: string;
  isSubmitted: boolean;
  isEliminated: boolean;
  isBanned: boolean;
  banMessage: string;
  eliminationMessage: string;
  answerResult: {
    isCorrect: boolean;
    correctAnswer: string | number[];
    explanation?: string;
    score: number;
    eliminated: boolean;
    questionOrder: number;
    submittedAt: string;
  } | null;
  canShowResult: boolean;
  isApiSubmitting: boolean;
  isRescued?: boolean; // üÜï NEW: Prop ƒë·ªÉ check rescue mode
  isInRescueMode?: boolean; // üÜï NEW: Prop ƒë·ªÉ check rescue mode
  onAnswerSelect: (answer: string) => void;
  onSubmitAnswer: () => void;
}

const QuestionOptions: React.FC<QuestionOptionsProps> = ({
  options,
  selectedAnswer,
  isSubmitted,
  isEliminated,
  isBanned,
  banMessage,
  eliminationMessage,
  answerResult,
  canShowResult,
  isApiSubmitting,
  isRescued = false, // üÜï NEW: Default false
  isInRescueMode = false, // üÜï NEW: Default false
  onAnswerSelect,
  onSubmitAnswer,
}) => {
  // üî• NEW: ƒêi·ªÅu ki·ªán hi·ªÉn th·ªã options - hi·ªÉn th·ªã khi:
  // 1. Ch∆∞a b·ªã c·∫•m
  // 2. Ch∆∞a b·ªã lo·∫°i HO·∫∂C (b·ªã lo·∫°i nh∆∞ng c√≥ k·∫øt qu·∫£ ƒë·ªÉ hi·ªÉn th·ªã)
  const shouldShowOptions =
    !isBanned &&
    (!isEliminated || (isEliminated && canShowResult && answerResult));

  // üî• NEW: ƒêi·ªÅu ki·ªán disable t∆∞∆°ng t√°c - disable khi:
  // 1. ƒê√£ submit
  // 2. B·ªã lo·∫°i
  // 3. B·ªã c·∫•m
  // 4. ƒêang trong rescue mode
  const shouldDisableInteraction =
    isSubmitted || isEliminated || isBanned || isInRescueMode || isRescued;

  const getOptionClass = (option: string) => {
    // üî• NEW: N·∫øu ƒëang rescue mode, hi·ªÉn th·ªã m√†u x√°m
    if (isInRescueMode || isRescued) {
      return "bg-gray-100 border-gray-300 text-gray-500 cursor-not-allowed opacity-60";
    }

    if (!canShowResult) {
      return selectedAnswer === option
        ? "bg-blue-100 border-blue-500 text-blue-800 shadow-md"
        : "bg-gray-50 border-gray-200 hover:bg-gray-100 hover:border-gray-300";
    }

    // ƒê√£ submit - hi·ªÉn th·ªã k·∫øt qu·∫£ v·ªõi m√†u s·∫Øc r√µ r√†ng
    const isCorrectAnswer = option === answerResult?.correctAnswer;
    const isUserSelection = option === selectedAnswer;

    if (isCorrectAnswer) {
      return "bg-green-100 border-green-500 text-green-800 shadow-lg border-2";
    }

    if (isUserSelection && !answerResult?.isCorrect) {
      return "bg-red-100 border-red-500 text-red-800 shadow-lg border-2";
    }

    return "bg-gray-50 border-gray-200 text-gray-500 opacity-60";
  };

  const getResultIcon = (option: string) => {
    if (!canShowResult || !answerResult) return null;

    const isCorrectAnswer = option === answerResult.correctAnswer;
    const isUserSelection = option === selectedAnswer;

    if (isCorrectAnswer) {
      return (
        <Box className="flex items-center gap-2">
          <CheckCircle className="text-green-600 text-xl" />
          <Chip
            label="ƒê√öNG"
            size="small"
            className="bg-green-600 text-white font-bold"
          />
        </Box>
      );
    }

    if (isUserSelection && !answerResult.isCorrect) {
      return (
        <Box className="flex items-center gap-2">
          <Cancel className="text-red-600 text-xl" />
          <Chip
            label="SAI"
            size="small"
            className="bg-red-600 text-white font-bold"
          />
        </Box>
      );
    }

    return null;
  };

  return (
    <Box className="space-y-4">
      {/* üî• NEW: Hi·ªÉn th·ªã options (bao g·ªìm c·∫£ khi b·ªã lo·∫°i nh∆∞ng c√≥ k·∫øt qu·∫£) */}
      {shouldShowOptions && (
        <FormControl component="fieldset" className="w-full">
          <RadioGroup
            value={selectedAnswer}
            onChange={(e) =>
              !shouldDisableInteraction && onAnswerSelect(e.target.value)
            }
          >
            <Box className="space-y-3">
              {options?.map((option, index) => (
                <Box
                  key={index}
                  className={`p-3 rounded-lg border-2 transition-all ${
                    shouldDisableInteraction
                      ? "cursor-not-allowed"
                      : "cursor-pointer"
                  } ${getOptionClass(option)}`}
                  onClick={() =>
                    !shouldDisableInteraction && onAnswerSelect(option)
                  }
                >
                  <Box className="flex items-center justify-between">
                    <FormControlLabel
                      value={option}
                      control={<Radio disabled={shouldDisableInteraction} />}
                      label={
                        <Typography variant="body1" className="font-medium">
                          {String.fromCharCode(65 + index)}. {option}
                        </Typography>
                      }
                      className="m-0 flex-1"
                    />
                    {getResultIcon(option)}
                  </Box>
                </Box>
              ))}
            </Box>
          </RadioGroup>
        </FormControl>
      )}

      {/* üî• NEW: Hi·ªÉn th·ªã th√¥ng b√°o ban (ch·ªâ khi b·ªã c·∫•m) */}
      {isBanned && (
        <Alert
          severity="error"
          icon={<Cancel />}
          className="border-2 border-red-500 bg-red-50 mb-4"
        >
          <AlertTitle>B·ªã c·∫•m tham gia</AlertTitle>
          <Box className="space-y-3">
            <Typography variant="h6" className="font-bold text-red-800">
              B·∫°n ƒë√£ b·ªã c·∫•m tham gia v√¨ vi ph·∫°m quy ch·∫ø!
            </Typography>
            <Typography variant="body2" className="text-red-700">
              {banMessage}
            </Typography>
            <Typography variant="body2" className="text-red-600">
              üí° B·∫°n v·∫´n c√≥ th·ªÉ theo d√µi c√¢u h·ªèi nh∆∞ng kh√¥ng th·ªÉ tr·∫£ l·ªùi.
            </Typography>
          </Box>
        </Alert>
      )}

      {/* üî• NEW: Hi·ªÉn th·ªã th√¥ng b√°o elimination (ch·ªâ khi b·ªã lo·∫°i v√† kh√¥ng c√≥ k·∫øt qu·∫£) */}
      {isEliminated && !canShowResult && !answerResult && (
        <Alert
          severity="warning"
          icon={<Cancel />}
          className="border-2 border-orange-500 bg-orange-50 mb-4"
        >
          <AlertTitle>ƒê√£ b·ªã lo·∫°i</AlertTitle>
          <Box className="space-y-3">
            <Typography variant="h6" className="font-bold text-orange-800">
              B·∫°n ƒë√£ b·ªã lo·∫°i kh·ªèi tr·∫≠n ƒë·∫•u!
            </Typography>
            <Typography variant="body2" className="text-orange-700">
              {eliminationMessage ||
                "Do tr·∫£ l·ªùi sai ho·∫∑c kh√¥ng tr·∫£ l·ªùi c√¢u h·ªèi."}
            </Typography>
            <Typography variant="body2" className="text-orange-600">
              üí° B·∫°n v·∫´n c√≥ th·ªÉ theo d√µi c√¢u h·ªèi nh∆∞ng kh√¥ng th·ªÉ tr·∫£ l·ªùi.
            </Typography>
          </Box>
        </Alert>
      )}

      {/* üÜï NEW: Hi·ªÉn th·ªã th√¥ng b√°o rescue mode */}
      {(isInRescueMode || isRescued) && (
        <Alert
          severity="info"
          className="border-2 border-blue-500 bg-blue-50 mb-4"
        >
          <AlertTitle>üéâ ƒêang trong ch·∫ø ƒë·ªô c·ª©u tr·ª£</AlertTitle>
          <Typography variant="body2" className="text-blue-700">
            B·∫°n ƒëang ƒë∆∞·ª£c c·ª©u tr·ª£. Vui l√≤ng ch·ªù c√¢u h·ªèi ti·∫øp theo...
          </Typography>
        </Alert>
      )}

      {/* N√∫t submit */}
      {/* üî• NEW: ·∫®n submit button n·∫øu th√≠ sinh b·ªã lo·∫°i, b·ªã c·∫•m ho·∫∑c ƒëang rescue */}
      {!isSubmitted &&
        !isEliminated &&
        !isBanned &&
        !isInRescueMode &&
        !isRescued && (
          <Box className="flex justify-end mt-4">
            <Button
              variant="contained"
              color="primary"
              size="large"
              startIcon={<Send />}
              onClick={onSubmitAnswer}
              disabled={!selectedAnswer || isApiSubmitting}
              className="px-8 py-3"
            >
              {isApiSubmitting ? "ƒêang x·ª≠ l√Ω..." : "X√°c nh·∫≠n"}
            </Button>
          </Box>
        )}
    </Box>
  );
};

export default QuestionOptions;
